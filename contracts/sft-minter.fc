;; SFT minter smart contract

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;; storage scheme
;; storage#_ index:uint64 collection_address:MsgAddress total_supply:Coins admin_address:MsgAddress individual_sft_content:^Cell sft_wallet_code:^Cell = Storage;

(int, int, slice, int, slice, cell, cell) load_data() {
  slice ds = get_data().begin_parse();
  var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
  if (ds.slice_bits() > 0) {
    return (-1, index, collection_address, ds~load_coins(), ds~load_msg_addr(), ds~load_ref(), ds~load_ref());
  } else {
    cell admin_address = begin_cell().store_uint(0,2).end_cell();
    return (0, index, collection_address, 0, admin_address.begin_parse(), null(), null()); ;; nft not initialized yet
  }
}

() save_data(int index, slice collection_address, int total_supply, slice admin_address, cell individual_sft_content, cell sft_wallet_code) impure inline {
  set_data(begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(individual_sft_content)
            .store_ref(sft_wallet_code)
           .end_cell()
          );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() mint_sft_tokens(slice to_address, cell sft_wallet_code, int ton_amount, cell internal_transfer_op) impure {
  cell state_init = calculate_sft_wallet_state_init(to_address, my_address(), sft_wallet_code);
  slice to_wallet_address = calculate_sft_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(ton_amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(internal_transfer_op);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() transfer_admin_role(int balance, int index, slice collection_address, slice admin_address, cell individual_sft_content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int total_supply, cell sft_wallet_code) impure inline {
    throw_unless(401, equal_slices(sender_address, admin_address));

    slice new_admin_address = in_msg_body~load_msg_addr();
    force_chain(new_admin_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this sft minter don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base sft minter spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_admin_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(admin_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    save_data(index, collection_address, total_supply, new_admin_address, individual_sft_content, sft_wallet_code);
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    (int init?,
     int index,
     slice collection_address,
     int total_supply,
     slice admin_address,
     cell individual_sft_content,
     cell sft_wallet_code) = load_data();

    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      save_data(index, collection_address, in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_ref(), in_msg_body~load_ref());
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int ton_amount = in_msg_body~load_coins(); ;;nanoTons 
        cell internal_transfer_op = in_msg_body~load_ref();
        slice internal_transfer_op_cs = internal_transfer_op.begin_parse();
        internal_transfer_op_cs~skip_bits(32 + 64); ;; op + query_id
        int sft_amount = internal_transfer_op_cs~load_coins();
        
        mint_sft_tokens(to_address, sft_wallet_code, ton_amount, internal_transfer_op);
        save_data(index, collection_address, total_supply + sft_amount, admin_address, individual_sft_content, sft_wallet_code);
        return ();
    }

    if (op == op::burn_notification()) {
        int sft_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_sft_wallet_address(from_address, my_address(), sft_wallet_code), sender_address)
        );
        save_data(index, collection_address, total_supply - sft_amount, admin_address, individual_sft_content, sft_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::change_admin()) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(index, collection_address, total_supply, new_admin_address, individual_sft_content, sft_wallet_code);
        return ();
    }

    if (op == op::change_individual_sft_content()) { ;; change individual_sft_content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(index, collection_address, total_supply, admin_address, in_msg_body~load_ref(), sft_wallet_code);
        return ();
    }

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    if (op == op::transfer_ownership()) {
      transfer_admin_role(balance, index, collection_address, admin_address, individual_sft_content, sender_address, query_id, in_msg_body, fwd_fee, total_supply, sft_wallet_code);
      return ();
    }

    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int init?, int index, slice collection_address, int total_supply, slice admin_address, cell individual_sft_content, cell sft_wallet_code) = load_data();
    return (total_supply, -1, admin_address, individual_sft_content, sft_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int init?, int index, slice collection_address, int total_supply, slice admin_address, cell individual_sft_content, cell sft_wallet_code) = load_data();
    return calculate_user_sft_wallet_address(owner_address, my_address(), sft_wallet_code);
}

(int, int, slice) get_sft_collection_data() method_id {
    (int init?, int index, slice collection_address, int total_supply, slice admin_address, cell individual_sft_content, cell sft_wallet_code) = load_data();
    return (init?, index, collection_address);
}